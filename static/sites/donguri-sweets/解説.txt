◆descriptionとkeywordsの設定
meta name="description"では検索結果画面に表示されるWebページの概要を設定します。おそらく、これを読んでヒットしたページのうちどれをクリックするか決める方が多いのではないかと思います。
ですので、descriptionは必ず設定するようにしましょう。文字数はスマホからの閲覧も考慮に入れると90字前後がいいかと思います。
meta name="keywords"はページの内容に関するキーワードを設定できます。これを設定すると、昔は検索エンジンに引っ掛かりやすくなったそうです。
2020年現在においてはほとんど意味が無いと言われてますが、余裕があったら設定しておくといいでしょう。


◆OGPの設定
OGPとはSNSでページがシェアされた際にどのように表示されるかを設定するものです。
設定しておいて損はないので、是非設定しておきましょう。
設定方法はhtmlタグかheadタグに「prefix="og: http://ogp.me/ns#」を追加した後、headタグ内に<meta property="og:設定項目" content="内容">と記述します。
OGPについて分かりやすく解説しているページがあったのでシェアしておきます。→ https://haniwaman.com/ogp/


◆原稿
めんどくさいかもしれませんが、サイト内の文章は誤字脱字を防ぐためすべて原稿の文章をコピペするようにしましょう。
特に商品の値段などを書き間違えると大変ですので、気を付けてください。


◆画像
imgはp等のなんらかのブロック要素でくくっておくといいと言われています。実際、その方がスタイルがかけやすかったりするのでなるべく何かで括っておきましょう。
imgのalt属性は無くても表示には影響ありませんが、検索エンジンには影響するので絶対に設定しておいてください。
メインビジュアルなどブラウザの横幅に合わせて画像を伸び縮みさせたい場合は、width:100%;と設定しておきましょう。その際height: auto;と設定しておくと縦横比が崩れません。
また、ときどき画像の下部に謎の余白が出現するときがあります。これを防ぐためにcssに
img {
  vertical-align: bottom;
}
と記述しておいてください。


◆コーディングの統一
このサイトにはConcept、Brownieなど全部で5つの段落があります。これらの段落は見出しのデザインや余白の付け方など、共通している部分が多いです。
このようにデザインが共通している部分は、なるべく同じようなやり方、同じクラス名でコーディングするのが望ましいと思います。
例えばこの5つの段落を全部別のクラス名でコーディングし、それぞれ別々にスタイルを設定していたとします。
もしその状態で、「40pxの余白をやっぱり30pxにしてほしい」と変更が発生した場合どうなるでしょうか？一か所一か所全部修正する必要があるのでとても大変です。
しかし、全部同じクラス名でコーディングしていた場合は、一か所だけ変更すればいいので簡単です。
特に商品紹介の部分は、新商品の追加や商品の入れ替えなどで変更が発生する可能性が非常に高いです。
ですので、ブラウニー、タルト、クッキーの三か所だけでも同じ構成でコーディングしておくようにしましょう。


◆リンク
このサイトの文字色は基本的に黒か赤ですが、電話番号、メアド、TOPへの部分だけ青になっています。
これはデフォルトのリンクの文字色です。内容的にも、ここはリンクであると考えていいでしょう。
TOPへの部分はページ内遷移でページの最上部に移動するよう設定してください。
電話番号とメアドの部分も、アプリケーションが立ち上がるように設定をお願いします。
設定方法は電話の場合<a href="tel:電話番号">リンク文字</a>、メールの場合<a href="mailto:メアド">リンク文字</a>で設定できます。
また、PC表示の場合は電話を立ち上げたくないという時は、pointer-events: none;で設定を無効にできます。
これを設定した場合は、メディアクエリのスマホ表示の部分でpointer-events: auto;と設定し元に戻しておきましょう。(今回はPC版サイトのみの制作となるので、あまり関係ありませんが…)


◆ページ内遷移とスムーズスクロール
このサイトはページ内遷移を使用しています。ナビゲーションのConceptをクリックしたらページ内のConceptの段落に、Brownieをクリックしたらブラウニーの商品紹介の部分までスクロールされるようにidを使って設定しましょう。
その際、パッと画面が切り替わるよりも滑らかにスクロールされた方が見栄えがいいと思います。cssに
html{
  scroll-behavior: smooth;
}
と記述すると滑らかにスクロールできるようになるので書いておきましょう。


◆変数
このページでは#c00のカラーが複数個所で使われています。このような何度も使うもの(特にサイトのテーマカラーなど)は「変数」として設定して使い回すと何かと楽です。
変数の設定はcss内に
:root {
  --任意の名前:設定したい値;
}
と記述します。今回の場合ですと、
:root {
  --main-color:#c00;
}
と記述してあります。
使用する際は、color: var(--任意の名前);と記述します。(今回の場合はcolor: var(--main-color);)
変数を使うとわざわざ細かいカラーコードなどを暗記しなくてすみますし、変更があった場合も大元の変数の設定さえ変更できれば一括で変更できるのでとても楽です。


◆margin
要素と要素の間に余白がある場合、上の要素にmargin-bottomを設定するべきか、下の要素にmargin-topを設定するべきか迷うと思います。
これはどっちでもいいんですが、なるべくページ内で統一しておいたほうが分かりやすいと思います。今回は基本的にmargin-bottomでコーディングしました。
しかし絶対統一しなければいけないというわけでは無いです。このページ内でもmargin-topをかけてる場所もあります。


◆flexbox
商品紹介と商品写真の横並び、アクセスの文章と地図画像の横並びはflexboxを使っています。
この二つをdivで囲み、そのdivにdisplay:flexを設定するのがやり方としては一番楽なやり方です。
しかしこれだとdivが増えすぎて、コードがやや煩雑になってしまう気もします。
そこで今回は、段落をくくっているsectionに直接display:flexをかけてしまいました。
もちろんこのままだと、見出しやサブタイトルまで横並びになってしまいます。
なのでまずは、flex-wrap: wrap;で横並びが要素からはみ出しそうになったら折り返して表示するように設定します。
その上で見出しやサブタイトルなど横並びにしたくない部分は、width:100%;で親の幅いっぱいに要素が広がるようにしました。
こうすることで、divを増やさず商品紹介やアクセスの文章と画像だけが横並びになるように設定できました。